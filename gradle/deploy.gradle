ssh.settings {
    knownHosts = allowAnyHosts
}

remotes {
    ev3dev {
        host = project.brickHost
        user = project.brickUser
        password = project.brickPassword
    }
}

task testConnection {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "ls ")
            }
        }
    }
}

task pkillJava {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "pkill java")
            }
        }
    }
}

task removePreviousJar {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "rm ${project.userJarPath()} ")
            }
        }
    }
}

task deploy {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "mkdir -p ${project.userJarsPath}")
                put from: "./build/libs/${rootProject.name}-${version}-all.jar", into: "${project.userJarsPath}"
            }
        }
    }
}
deploy.dependsOn clean, fatJar

task remoteRun {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "time java -jar ${project.userJarPath()} ")
            }
        }
    }
}

task remoteBrickRun {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "time brickrun -- java -jar ${project.userJarPath()} ")
            }
        }
    }
}

task remoteRunClassVerbose {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "java -verbose:class -jar ${project.userJarPath()} ")
            }
        }
    }
}

task remoteSudoRun {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "echo -e \"${project.brickPassword}\" | sudo -S java -jar ${project.userJarPath()} ")
            }
        }
    }
}

task remoteProfilingRun {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "brickrun -- java -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=7091 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -jar ${project.userJarPath()} ")
            }
        }
    }
}

task remoteProfilingSudoRun {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "echo -e \"${project.brickPassword}\" | sudo -S brickrun -- java -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=7091 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -jar ${project.userJarPath()} ")
            }
        }
    }
}

task deployAndRun {
    doLast {
    }
}
deployAndRun.dependsOn deploy, remoteRun

task deployAndBrickRun {
    doLast {
    }
}
deployAndBrickRun.dependsOn deploy, remoteBrickRun


task deployAndSudoRun {
    doLast {
    }
}
deployAndSudoRun.dependsOn deploy, remoteSudoRun

task deployAndProfilingRun {
    doLast {
    }
}
deployAndProfilingRun.dependsOn deploy, remoteProfilingRun

task deployAndProfilingSudoRun {
    doLast {
    }
}
deployAndProfilingSudoRun.dependsOn deploy, remoteProfilingSudoRun

//Organize tasks in a Group
def groupName = "ev3dev-lang-java"
testConnection.group = groupName
removePreviousJar.group = groupName
deploy.group = groupName
remoteBrickRun.group = groupName
remoteRun.group = groupName
remoteRunClassVerbose.group = groupName
remoteSudoRun.group = groupName
remoteProfilingRun.group = groupName
remoteProfilingSudoRun.group = groupName
deployAndRun.group = groupName
deployAndBrickRun.group = groupName
deployAndSudoRun.group = groupName
deployAndProfilingRun.group = groupName
deployAndProfilingSudoRun.group = groupName
pkillJava.group = groupName

task installLibraries {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "rm -rf ${project.externalJarsPath}")
                sshPrint(delegate, "mkdir ${project.externalJarsPath}")
                sshPrint(delegate, "wget https://jitpack.io/com/github/ev3dev-lang-java/ev3dev-lang-java/2.4.16/ev3dev-lang-java-2.4.16.jar -P ${project.externalJarsPath}")
                sshPrint(delegate, "wget https://jitpack.io/com/github/ev3dev-lang-java/lejos-commons/0.7.2/lejos-commons-0.7.2.jar -P ${project.externalJarsPath}")
                sshPrint(delegate, "wget http://central.maven.org/maven2/net/java/dev/jna/jna/4.5.2/jna-4.5.2.jar -P ${project.externalJarsPath}")
                sshPrint(delegate, "wget http://central.maven.org/maven2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar -P ${project.externalJarsPath}")
                sshPrint(delegate, "wget http://central.maven.org/maven2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar -P ${project.externalJarsPath}")
                sshPrint(delegate, "wget http://central.maven.org/maven2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar -P ${project.externalJarsPath}")
                sshPrint(delegate, "wget http://central.maven.org/maven2/org/slf4j/slf4j-simple/1.7.25/slf4j-simple-1.7.25.jar -P ${project.externalJarsPath}")
            }
        }
    }
}

task remoteRun2 {

    doLast {

        println project.externalJars

        //def dependencies = project.externalJars.tokenize(' ')
        def dependenciesPath = ""

        project.externalJars.each {
            dependenciesPath += ":${project.externalJarsPath}/${it}"
        }

        println dependenciesPath

        ssh.run {
            session(remotes.ev3dev) {
                sshPrint(delegate, "${project.prefix} java ${project.jvmFlags} -cp ${project.userJarPath()}" + dependenciesPath + " ${project.mainClass}")
            }
        }
    }
}

task deployAndRun2 {
    doLast {
    }
}
deployAndRun2.dependsOn deploy, remoteRun2


def groupName2 = "ev3dev-lang-java-slim"
installLibraries.group = groupName2
deployAndRun2.group = groupName2
remoteRun2.group = groupName2
